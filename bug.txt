position startpos moves f2f4 d7d5 g1f3 g8f6 d2d3 b8c6 e2e3 c8g4 f1e2 g4f3 e2f3 e7e5 e1g1 e5f4 e3f4 d8d7 b1d2 f8b4 c2c3 b4d6 f3e2 e8g8 d3d4 c6e7 d2f3 c7c5 c3c4 e7f5 c4d5 f6d5 f3e5 d7e7 f1e1 f5d4 e2c4 e7e6 b2b4 a8d8 c1b2 d6e5 e1e5 d5e3 c4e6 e3d1 b2d4 d8d4 e6b3 d1c3 b4c5 d4f4 a1c1

go wtime 448140 btime 410900 winc 3000 binc 3000 depth 8

position startpos moves f2f4 d7d5 g1f3 g8f6 d2d3 b8c6 e2e3 c8g4 f1e2 g4f3 e2f3 e7e5 e1g1 e5f4 e3f4 d8d7 b1d2 f8b4 c2c3 b4d6 f3e2 e8g8 d3d4 c6e7 d2f3 c7c5 c3c4 e7f5 c4d5 f6d5 f3e5 d7e7 f1e1 f5d4 e2c4 e7e6 b2b4 a8d8 c1b2 d6e5 e1e5 d5e3 c4e6 e3d1 b2d4 d8d4 e6b3 d1c3 b4c5 d4f4 a1c1 f4f5 e5f5

go wtime 443860 btime 393460 winc 3000 binc 3000 depth 8


TRIES TO CASTLE



position startpos moves b1c3 g8f6 g1f3 b8c6 e2e4 e7e6 f1b5 f8b4 d2d3 d7d5 b5c6 b7c6 f3e5 b4c3 b2c3 d5e4 e5c6 d8d5 d3e4 d5e4

go wtime 678950 btime 617580 winc 3000 binc 3000 depth 2


GOES G4E5 AND LETS HIS KING AND ROOK GET FORKED, should go e8d8, SHOULD EVEN WORK ON DEPTH 2, TESTED ON DEPTH 8

position startpos moves b1c3 g8f6 g1f3 b8c6 d2d4 d7d5 f3e5 c6e5 d4e5 f6g4 d1d5 d8d5 c3d5

go wtime 648360 btime 699250 winc 3000 binc 3000 depth 2


position fen 3K4/8/3P1N2/8/4B3/2kq4/8/8 b - - 0 1

go wtime 648360 btime 699250 winc 3000 binc 3000 depth 2


EXPECTED: e3f5
position startpos moves f2f4 h7h6 e2e4 e7e5 g1e2 d7d6 d2d3 g7g6 g2g3 b8c6 f1g2 f8g7 e1g1 g8e7 c2c3 e8g8 b1a3 a7a5 a3c2 f7f5 c2e3 a5a4 a1b1 d8e8 c3c4 c8e6 f4e5 c6e5 e2f4 e8d7 e4f5 h6h5 f4e6 g8f7 e6f8 d7f5

go wtime 575331 btime 587460 winc 3000 binc 3000 depth 6


new chesster benchmarks:

import chesster
import chess
pos = chesster.Position()
move = chess.Move.from_uci('e2e4')

chesster.moveandpop(chess.Move.from_uci('e2e4'), pos)

time_bench(chesster.moveandpop, [chess.Move.from_uci('e2e4'), pos], 8000)

NEW POSITION PAWN E2-E4 move x8000: 0.20049262046813965

time_bench(pos.move, [chess.Move.from_uci('e2e4'),], 8000)

NEW POSITION PAWN E2-E4 LAZY_VALUE x8000: 0.027927637100219727

time_bench(pos.lazy_value, [chess.Move.from_uci('e2e4'),], 8000)

copy position x8000: 0.014986991882324219

time_bench(pos.copy, [], 8000)

old chesster benchmarks:

e2e4 move x1: 0.000000000000000000

import chesster
pos = chesster.Position(chesster.initial, 0, 0, None, None, None, None, 0)
pos.move((85,75))
time_bench(pos.move, [(85,75),])

e2e4 move x8000: 0.039893150329589844
time_bench(pos.move, [(85,75),], 8000)

make new Position object x8000 : 0.0020074844360351562
time_bench(chesster.Position, [chesster.initial, 0, 0, None, None, None, None, 0], 8000)

lazy_value e2e4 x8000: 0.015988588333129883

LAZY VALUE ABOUT 2x slower
COPY INCREDIBLY SLOW